### YamlMime:ManagedReference
items:
- uid: Infrastructure.GameplayStateMachine
  commentId: T:Infrastructure.GameplayStateMachine
  id: GameplayStateMachine
  parent: Infrastructure
  children:
  - Infrastructure.GameplayStateMachine.#ctor(Infrastructure.CameraPositionService,GameTimeService,Infrastructure.UiService)
  - Infrastructure.GameplayStateMachine.ChangeState``1
  - Infrastructure.GameplayStateMachine.OnStateChanged
  langs:
  - csharp
  - vb
  name: GameplayStateMachine
  nameWithType: GameplayStateMachine
  fullName: Infrastructure.GameplayStateMachine
  type: Class
  source:
    id: GameplayStateMachine
    path: ''
    startLine: 1936
  assemblies:
  - cs.temp.dll
  namespace: Infrastructure
  syntax:
    content: 'public class GameplayStateMachine : AbstractStateMachine'
    content.vb: >-
      Public Class GameplayStateMachine
          Inherits AbstractStateMachine
  inheritance:
  - System.Object
  - Infrastructure.AbstractStateMachine
  inheritedMembers:
  - Infrastructure.AbstractStateMachine.ActiveState
  - Infrastructure.AbstractStateMachine._activeState
  - Infrastructure.AbstractStateMachine._states
  - Infrastructure.AbstractStateMachine.EnterState``1
  - Infrastructure.AbstractStateMachine.EnterState``2({TPayload})
  - Infrastructure.AbstractStateMachine.GetState``1
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Infrastructure.GameplayStateMachine.OnStateChanged
  commentId: E:Infrastructure.GameplayStateMachine.OnStateChanged
  id: OnStateChanged
  parent: Infrastructure.GameplayStateMachine
  langs:
  - csharp
  - vb
  name: OnStateChanged
  nameWithType: GameplayStateMachine.OnStateChanged
  fullName: Infrastructure.GameplayStateMachine.OnStateChanged
  type: Event
  source:
    id: OnStateChanged
    path: ''
    startLine: 1938
  assemblies:
  - cs.temp.dll
  namespace: Infrastructure
  syntax:
    content: public event Action<IExitableState> OnStateChanged
    return:
      type: Global.Action{Infrastructure.IExitableState}
    content.vb: Public Event OnStateChanged As Action(Of IExitableState)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Infrastructure.GameplayStateMachine.#ctor(Infrastructure.CameraPositionService,GameTimeService,Infrastructure.UiService)
  commentId: M:Infrastructure.GameplayStateMachine.#ctor(Infrastructure.CameraPositionService,GameTimeService,Infrastructure.UiService)
  id: '#ctor(Infrastructure.CameraPositionService,GameTimeService,Infrastructure.UiService)'
  parent: Infrastructure.GameplayStateMachine
  langs:
  - csharp
  - vb
  name: GameplayStateMachine(CameraPositionService, GameTimeService, UiService)
  nameWithType: GameplayStateMachine.GameplayStateMachine(CameraPositionService, GameTimeService, UiService)
  fullName: Infrastructure.GameplayStateMachine.GameplayStateMachine(Infrastructure.CameraPositionService, GameTimeService, Infrastructure.UiService)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 1940
  assemblies:
  - cs.temp.dll
  namespace: Infrastructure
  syntax:
    content: public GameplayStateMachine(CameraPositionService cameraPositionService, GameTimeService gameTimeService, UiService uiService)
    parameters:
    - id: cameraPositionService
      type: Infrastructure.CameraPositionService
    - id: gameTimeService
      type: Global.GameTimeService
    - id: uiService
      type: Infrastructure.UiService
    content.vb: Public Sub New(cameraPositionService As CameraPositionService, gameTimeService As GameTimeService, uiService As UiService)
  overload: Infrastructure.GameplayStateMachine.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Infrastructure.GameplayStateMachine.ChangeState``1
  commentId: M:Infrastructure.GameplayStateMachine.ChangeState``1
  id: ChangeState``1
  parent: Infrastructure.GameplayStateMachine
  langs:
  - csharp
  - vb
  name: ChangeState<TState>()
  nameWithType: GameplayStateMachine.ChangeState<TState>()
  fullName: Infrastructure.GameplayStateMachine.ChangeState<TState>()
  type: Method
  source:
    id: ChangeState
    path: ''
    startLine: 1951
  assemblies:
  - cs.temp.dll
  namespace: Infrastructure
  syntax:
    content: >-
      protected override TState ChangeState<TState>()
          where TState : class, IExitableState
    typeParameters:
    - id: TState
    return:
      type: '{TState}'
    content.vb: Protected Overrides Function ChangeState(Of TState As {Class, IExitableState}) As TState
  overridden: Infrastructure.AbstractStateMachine.ChangeState``1
  overload: Infrastructure.GameplayStateMachine.ChangeState*
  nameWithType.vb: GameplayStateMachine.ChangeState(Of TState)()
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Infrastructure.GameplayStateMachine.ChangeState(Of TState)()
  name.vb: ChangeState(Of TState)()
references:
- uid: Infrastructure
  commentId: N:Infrastructure
  name: Infrastructure
  nameWithType: Infrastructure
  fullName: Infrastructure
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Infrastructure.AbstractStateMachine
  commentId: T:Infrastructure.AbstractStateMachine
  parent: Infrastructure
  name: AbstractStateMachine
  nameWithType: AbstractStateMachine
  fullName: Infrastructure.AbstractStateMachine
- uid: Infrastructure.AbstractStateMachine.ActiveState
  commentId: P:Infrastructure.AbstractStateMachine.ActiveState
  parent: Infrastructure.AbstractStateMachine
  name: ActiveState
  nameWithType: AbstractStateMachine.ActiveState
  fullName: Infrastructure.AbstractStateMachine.ActiveState
- uid: Infrastructure.AbstractStateMachine._activeState
  commentId: F:Infrastructure.AbstractStateMachine._activeState
  parent: Infrastructure.AbstractStateMachine
  name: _activeState
  nameWithType: AbstractStateMachine._activeState
  fullName: Infrastructure.AbstractStateMachine._activeState
- uid: Infrastructure.AbstractStateMachine._states
  commentId: F:Infrastructure.AbstractStateMachine._states
  parent: Infrastructure.AbstractStateMachine
  name: _states
  nameWithType: AbstractStateMachine._states
  fullName: Infrastructure.AbstractStateMachine._states
- uid: Infrastructure.AbstractStateMachine.EnterState``1
  commentId: M:Infrastructure.AbstractStateMachine.EnterState``1
  parent: Infrastructure.AbstractStateMachine
  name: EnterState<TState>()
  nameWithType: AbstractStateMachine.EnterState<TState>()
  fullName: Infrastructure.AbstractStateMachine.EnterState<TState>()
  nameWithType.vb: AbstractStateMachine.EnterState(Of TState)()
  fullName.vb: Infrastructure.AbstractStateMachine.EnterState(Of TState)()
  name.vb: EnterState(Of TState)()
  spec.csharp:
  - uid: Infrastructure.AbstractStateMachine.EnterState``1
    name: EnterState<TState>
    nameWithType: AbstractStateMachine.EnterState<TState>
    fullName: Infrastructure.AbstractStateMachine.EnterState<TState>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Infrastructure.AbstractStateMachine.EnterState``1
    name: EnterState(Of TState)
    nameWithType: AbstractStateMachine.EnterState(Of TState)
    fullName: Infrastructure.AbstractStateMachine.EnterState(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Infrastructure.AbstractStateMachine.EnterState``2({TPayload})
  commentId: M:Infrastructure.AbstractStateMachine.EnterState``2(``1)
  parent: Infrastructure.AbstractStateMachine
  definition: Infrastructure.AbstractStateMachine.EnterState``2(``1)
  name: EnterState<TState, TPayload>(TPayload)
  nameWithType: AbstractStateMachine.EnterState<TState, TPayload>(TPayload)
  fullName: Infrastructure.AbstractStateMachine.EnterState<TState, TPayload>(TPayload)
  nameWithType.vb: AbstractStateMachine.EnterState(Of TState, TPayload)(TPayload)
  fullName.vb: Infrastructure.AbstractStateMachine.EnterState(Of TState, TPayload)(TPayload)
  name.vb: EnterState(Of TState, TPayload)(TPayload)
  spec.csharp:
  - uid: Infrastructure.AbstractStateMachine.EnterState``2(``1)
    name: EnterState<TState, TPayload>
    nameWithType: AbstractStateMachine.EnterState<TState, TPayload>
    fullName: Infrastructure.AbstractStateMachine.EnterState<TState, TPayload>
  - name: (
    nameWithType: (
    fullName: (
  - name: TPayload
    nameWithType: TPayload
    fullName: TPayload
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Infrastructure.AbstractStateMachine.EnterState``2(``1)
    name: EnterState(Of TState, TPayload)
    nameWithType: AbstractStateMachine.EnterState(Of TState, TPayload)
    fullName: Infrastructure.AbstractStateMachine.EnterState(Of TState, TPayload)
  - name: (
    nameWithType: (
    fullName: (
  - name: TPayload
    nameWithType: TPayload
    fullName: TPayload
  - name: )
    nameWithType: )
    fullName: )
- uid: Infrastructure.AbstractStateMachine.GetState``1
  commentId: M:Infrastructure.AbstractStateMachine.GetState``1
  parent: Infrastructure.AbstractStateMachine
  name: GetState<TState>()
  nameWithType: AbstractStateMachine.GetState<TState>()
  fullName: Infrastructure.AbstractStateMachine.GetState<TState>()
  nameWithType.vb: AbstractStateMachine.GetState(Of TState)()
  fullName.vb: Infrastructure.AbstractStateMachine.GetState(Of TState)()
  name.vb: GetState(Of TState)()
  spec.csharp:
  - uid: Infrastructure.AbstractStateMachine.GetState``1
    name: GetState<TState>
    nameWithType: AbstractStateMachine.GetState<TState>
    fullName: Infrastructure.AbstractStateMachine.GetState<TState>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Infrastructure.AbstractStateMachine.GetState``1
    name: GetState(Of TState)
    nameWithType: AbstractStateMachine.GetState(Of TState)
    fullName: Infrastructure.AbstractStateMachine.GetState(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Infrastructure.AbstractStateMachine.EnterState``2(``1)
  commentId: M:Infrastructure.AbstractStateMachine.EnterState``2(``1)
  name: EnterState<TState, TPayload>(TPayload)
  nameWithType: AbstractStateMachine.EnterState<TState, TPayload>(TPayload)
  fullName: Infrastructure.AbstractStateMachine.EnterState<TState, TPayload>(TPayload)
  nameWithType.vb: AbstractStateMachine.EnterState(Of TState, TPayload)(TPayload)
  fullName.vb: Infrastructure.AbstractStateMachine.EnterState(Of TState, TPayload)(TPayload)
  name.vb: EnterState(Of TState, TPayload)(TPayload)
  spec.csharp:
  - uid: Infrastructure.AbstractStateMachine.EnterState``2(``1)
    name: EnterState<TState, TPayload>
    nameWithType: AbstractStateMachine.EnterState<TState, TPayload>
    fullName: Infrastructure.AbstractStateMachine.EnterState<TState, TPayload>
  - name: (
    nameWithType: (
    fullName: (
  - name: TPayload
    nameWithType: TPayload
    fullName: TPayload
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Infrastructure.AbstractStateMachine.EnterState``2(``1)
    name: EnterState(Of TState, TPayload)
    nameWithType: AbstractStateMachine.EnterState(Of TState, TPayload)
    fullName: Infrastructure.AbstractStateMachine.EnterState(Of TState, TPayload)
  - name: (
    nameWithType: (
    fullName: (
  - name: TPayload
    nameWithType: TPayload
    fullName: TPayload
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Action{Infrastructure.IExitableState}
  commentId: '!:Global.Action{Infrastructure.IExitableState}'
  definition: Global.Action`1
  name: Action<IExitableState>
  nameWithType: Action<IExitableState>
  fullName: Action<Infrastructure.IExitableState>
  nameWithType.vb: Action(Of IExitableState)
  fullName.vb: Action(Of Infrastructure.IExitableState)
  name.vb: Action(Of IExitableState)
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Infrastructure.IExitableState
    name: IExitableState
    nameWithType: IExitableState
    fullName: Infrastructure.IExitableState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Infrastructure.IExitableState
    name: IExitableState
    nameWithType: IExitableState
    fullName: Infrastructure.IExitableState
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Action`1
  commentId: '!:Global.Action`1'
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Infrastructure.GameplayStateMachine.#ctor*
  commentId: Overload:Infrastructure.GameplayStateMachine.#ctor
  name: GameplayStateMachine
  nameWithType: GameplayStateMachine.GameplayStateMachine
  fullName: Infrastructure.GameplayStateMachine.GameplayStateMachine
- uid: Infrastructure.CameraPositionService
  commentId: T:Infrastructure.CameraPositionService
  parent: Infrastructure
  name: CameraPositionService
  nameWithType: CameraPositionService
  fullName: Infrastructure.CameraPositionService
- uid: Global.GameTimeService
  commentId: '!:Global.GameTimeService'
  isExternal: true
  name: GameTimeService
  nameWithType: GameTimeService
  fullName: GameTimeService
- uid: Infrastructure.UiService
  commentId: T:Infrastructure.UiService
  parent: Infrastructure
  name: UiService
  nameWithType: UiService
  fullName: Infrastructure.UiService
- uid: Infrastructure.AbstractStateMachine.ChangeState``1
  commentId: M:Infrastructure.AbstractStateMachine.ChangeState``1
  parent: Infrastructure.AbstractStateMachine
  name: ChangeState<TState>()
  nameWithType: AbstractStateMachine.ChangeState<TState>()
  fullName: Infrastructure.AbstractStateMachine.ChangeState<TState>()
  nameWithType.vb: AbstractStateMachine.ChangeState(Of TState)()
  fullName.vb: Infrastructure.AbstractStateMachine.ChangeState(Of TState)()
  name.vb: ChangeState(Of TState)()
  spec.csharp:
  - uid: Infrastructure.AbstractStateMachine.ChangeState``1
    name: ChangeState<TState>
    nameWithType: AbstractStateMachine.ChangeState<TState>
    fullName: Infrastructure.AbstractStateMachine.ChangeState<TState>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Infrastructure.AbstractStateMachine.ChangeState``1
    name: ChangeState(Of TState)
    nameWithType: AbstractStateMachine.ChangeState(Of TState)
    fullName: Infrastructure.AbstractStateMachine.ChangeState(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Infrastructure.GameplayStateMachine.ChangeState*
  commentId: Overload:Infrastructure.GameplayStateMachine.ChangeState
  name: ChangeState
  nameWithType: GameplayStateMachine.ChangeState
  fullName: Infrastructure.GameplayStateMachine.ChangeState
- uid: '{TState}'
  commentId: '!:TState'
  definition: TState
  name: TState
  nameWithType: TState
  fullName: TState
- uid: TState
  name: TState
  nameWithType: TState
  fullName: TState
