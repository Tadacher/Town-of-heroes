### YamlMime:ManagedReference
items:
- uid: Infrastructure.GameStateMachine
  commentId: T:Infrastructure.GameStateMachine
  id: GameStateMachine
  parent: Infrastructure
  children:
  - Infrastructure.GameStateMachine.#ctor(Infrastructure.SceneLoaderService)
  langs:
  - csharp
  - vb
  name: GameStateMachine
  nameWithType: GameStateMachine
  fullName: Infrastructure.GameStateMachine
  type: Class
  source:
    id: GameStateMachine
    path: ''
    startLine: 610
  assemblies:
  - cs.temp.dll
  namespace: Infrastructure
  syntax:
    content: 'public class GameStateMachine : AbstractStateMachine'
    content.vb: >-
      Public Class GameStateMachine
          Inherits AbstractStateMachine
  inheritance:
  - System.Object
  - Infrastructure.AbstractStateMachine
  inheritedMembers:
  - Infrastructure.AbstractStateMachine.ActiveState
  - Infrastructure.AbstractStateMachine._activeState
  - Infrastructure.AbstractStateMachine._states
  - Infrastructure.AbstractStateMachine.EnterState``1
  - Infrastructure.AbstractStateMachine.EnterState``2({TPayload})
  - Infrastructure.AbstractStateMachine.ChangeState``1
  - Infrastructure.AbstractStateMachine.GetState``1
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Infrastructure.GameStateMachine.#ctor(Infrastructure.SceneLoaderService)
  commentId: M:Infrastructure.GameStateMachine.#ctor(Infrastructure.SceneLoaderService)
  id: '#ctor(Infrastructure.SceneLoaderService)'
  parent: Infrastructure.GameStateMachine
  langs:
  - csharp
  - vb
  name: GameStateMachine(SceneLoaderService)
  nameWithType: GameStateMachine.GameStateMachine(SceneLoaderService)
  fullName: Infrastructure.GameStateMachine.GameStateMachine(Infrastructure.SceneLoaderService)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 612
  assemblies:
  - cs.temp.dll
  namespace: Infrastructure
  syntax:
    content: public GameStateMachine(SceneLoaderService sceneLoaderService)
    parameters:
    - id: sceneLoaderService
      type: Infrastructure.SceneLoaderService
    content.vb: Public Sub New(sceneLoaderService As SceneLoaderService)
  overload: Infrastructure.GameStateMachine.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Infrastructure
  commentId: N:Infrastructure
  name: Infrastructure
  nameWithType: Infrastructure
  fullName: Infrastructure
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Infrastructure.AbstractStateMachine
  commentId: T:Infrastructure.AbstractStateMachine
  parent: Infrastructure
  name: AbstractStateMachine
  nameWithType: AbstractStateMachine
  fullName: Infrastructure.AbstractStateMachine
- uid: Infrastructure.AbstractStateMachine.ActiveState
  commentId: P:Infrastructure.AbstractStateMachine.ActiveState
  parent: Infrastructure.AbstractStateMachine
  name: ActiveState
  nameWithType: AbstractStateMachine.ActiveState
  fullName: Infrastructure.AbstractStateMachine.ActiveState
- uid: Infrastructure.AbstractStateMachine._activeState
  commentId: F:Infrastructure.AbstractStateMachine._activeState
  parent: Infrastructure.AbstractStateMachine
  name: _activeState
  nameWithType: AbstractStateMachine._activeState
  fullName: Infrastructure.AbstractStateMachine._activeState
- uid: Infrastructure.AbstractStateMachine._states
  commentId: F:Infrastructure.AbstractStateMachine._states
  parent: Infrastructure.AbstractStateMachine
  name: _states
  nameWithType: AbstractStateMachine._states
  fullName: Infrastructure.AbstractStateMachine._states
- uid: Infrastructure.AbstractStateMachine.EnterState``1
  commentId: M:Infrastructure.AbstractStateMachine.EnterState``1
  parent: Infrastructure.AbstractStateMachine
  name: EnterState<TState>()
  nameWithType: AbstractStateMachine.EnterState<TState>()
  fullName: Infrastructure.AbstractStateMachine.EnterState<TState>()
  nameWithType.vb: AbstractStateMachine.EnterState(Of TState)()
  fullName.vb: Infrastructure.AbstractStateMachine.EnterState(Of TState)()
  name.vb: EnterState(Of TState)()
  spec.csharp:
  - uid: Infrastructure.AbstractStateMachine.EnterState``1
    name: EnterState<TState>
    nameWithType: AbstractStateMachine.EnterState<TState>
    fullName: Infrastructure.AbstractStateMachine.EnterState<TState>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Infrastructure.AbstractStateMachine.EnterState``1
    name: EnterState(Of TState)
    nameWithType: AbstractStateMachine.EnterState(Of TState)
    fullName: Infrastructure.AbstractStateMachine.EnterState(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Infrastructure.AbstractStateMachine.EnterState``2({TPayload})
  commentId: M:Infrastructure.AbstractStateMachine.EnterState``2(``1)
  parent: Infrastructure.AbstractStateMachine
  definition: Infrastructure.AbstractStateMachine.EnterState``2(``1)
  name: EnterState<TState, TPayload>(TPayload)
  nameWithType: AbstractStateMachine.EnterState<TState, TPayload>(TPayload)
  fullName: Infrastructure.AbstractStateMachine.EnterState<TState, TPayload>(TPayload)
  nameWithType.vb: AbstractStateMachine.EnterState(Of TState, TPayload)(TPayload)
  fullName.vb: Infrastructure.AbstractStateMachine.EnterState(Of TState, TPayload)(TPayload)
  name.vb: EnterState(Of TState, TPayload)(TPayload)
  spec.csharp:
  - uid: Infrastructure.AbstractStateMachine.EnterState``2(``1)
    name: EnterState<TState, TPayload>
    nameWithType: AbstractStateMachine.EnterState<TState, TPayload>
    fullName: Infrastructure.AbstractStateMachine.EnterState<TState, TPayload>
  - name: (
    nameWithType: (
    fullName: (
  - name: TPayload
    nameWithType: TPayload
    fullName: TPayload
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Infrastructure.AbstractStateMachine.EnterState``2(``1)
    name: EnterState(Of TState, TPayload)
    nameWithType: AbstractStateMachine.EnterState(Of TState, TPayload)
    fullName: Infrastructure.AbstractStateMachine.EnterState(Of TState, TPayload)
  - name: (
    nameWithType: (
    fullName: (
  - name: TPayload
    nameWithType: TPayload
    fullName: TPayload
  - name: )
    nameWithType: )
    fullName: )
- uid: Infrastructure.AbstractStateMachine.ChangeState``1
  commentId: M:Infrastructure.AbstractStateMachine.ChangeState``1
  parent: Infrastructure.AbstractStateMachine
  name: ChangeState<TState>()
  nameWithType: AbstractStateMachine.ChangeState<TState>()
  fullName: Infrastructure.AbstractStateMachine.ChangeState<TState>()
  nameWithType.vb: AbstractStateMachine.ChangeState(Of TState)()
  fullName.vb: Infrastructure.AbstractStateMachine.ChangeState(Of TState)()
  name.vb: ChangeState(Of TState)()
  spec.csharp:
  - uid: Infrastructure.AbstractStateMachine.ChangeState``1
    name: ChangeState<TState>
    nameWithType: AbstractStateMachine.ChangeState<TState>
    fullName: Infrastructure.AbstractStateMachine.ChangeState<TState>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Infrastructure.AbstractStateMachine.ChangeState``1
    name: ChangeState(Of TState)
    nameWithType: AbstractStateMachine.ChangeState(Of TState)
    fullName: Infrastructure.AbstractStateMachine.ChangeState(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Infrastructure.AbstractStateMachine.GetState``1
  commentId: M:Infrastructure.AbstractStateMachine.GetState``1
  parent: Infrastructure.AbstractStateMachine
  name: GetState<TState>()
  nameWithType: AbstractStateMachine.GetState<TState>()
  fullName: Infrastructure.AbstractStateMachine.GetState<TState>()
  nameWithType.vb: AbstractStateMachine.GetState(Of TState)()
  fullName.vb: Infrastructure.AbstractStateMachine.GetState(Of TState)()
  name.vb: GetState(Of TState)()
  spec.csharp:
  - uid: Infrastructure.AbstractStateMachine.GetState``1
    name: GetState<TState>
    nameWithType: AbstractStateMachine.GetState<TState>
    fullName: Infrastructure.AbstractStateMachine.GetState<TState>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Infrastructure.AbstractStateMachine.GetState``1
    name: GetState(Of TState)
    nameWithType: AbstractStateMachine.GetState(Of TState)
    fullName: Infrastructure.AbstractStateMachine.GetState(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Infrastructure.AbstractStateMachine.EnterState``2(``1)
  commentId: M:Infrastructure.AbstractStateMachine.EnterState``2(``1)
  name: EnterState<TState, TPayload>(TPayload)
  nameWithType: AbstractStateMachine.EnterState<TState, TPayload>(TPayload)
  fullName: Infrastructure.AbstractStateMachine.EnterState<TState, TPayload>(TPayload)
  nameWithType.vb: AbstractStateMachine.EnterState(Of TState, TPayload)(TPayload)
  fullName.vb: Infrastructure.AbstractStateMachine.EnterState(Of TState, TPayload)(TPayload)
  name.vb: EnterState(Of TState, TPayload)(TPayload)
  spec.csharp:
  - uid: Infrastructure.AbstractStateMachine.EnterState``2(``1)
    name: EnterState<TState, TPayload>
    nameWithType: AbstractStateMachine.EnterState<TState, TPayload>
    fullName: Infrastructure.AbstractStateMachine.EnterState<TState, TPayload>
  - name: (
    nameWithType: (
    fullName: (
  - name: TPayload
    nameWithType: TPayload
    fullName: TPayload
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Infrastructure.AbstractStateMachine.EnterState``2(``1)
    name: EnterState(Of TState, TPayload)
    nameWithType: AbstractStateMachine.EnterState(Of TState, TPayload)
    fullName: Infrastructure.AbstractStateMachine.EnterState(Of TState, TPayload)
  - name: (
    nameWithType: (
    fullName: (
  - name: TPayload
    nameWithType: TPayload
    fullName: TPayload
  - name: )
    nameWithType: )
    fullName: )
- uid: Infrastructure.GameStateMachine.#ctor*
  commentId: Overload:Infrastructure.GameStateMachine.#ctor
  name: GameStateMachine
  nameWithType: GameStateMachine.GameStateMachine
  fullName: Infrastructure.GameStateMachine.GameStateMachine
- uid: Infrastructure.SceneLoaderService
  commentId: T:Infrastructure.SceneLoaderService
  parent: Infrastructure
  name: SceneLoaderService
  nameWithType: SceneLoaderService
  fullName: Infrastructure.SceneLoaderService
